{% extends 'admin/base.html.twig' %}

{% block title %}
    Gestionnaire de fichiers
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .file-manager {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        .upload-area {
            border: 2px dashed #ddd;
            border-radius: 10px;
            padding: 50px;
            text-align: center;
            margin-bottom: 30px;
            transition: all 0.3s ease;
        }
        
        .upload-area.dragover {
            border-color: #007bff;
            background-color: #f8f9fa;
        }
        
        .upload-area i {
            font-size: 48px;
            color: #6c757d;
            margin-bottom: 15px;
        }
        
        .file-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .file-item {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            text-align: center;
            background: white;
            transition: all 0.3s ease;
            cursor: pointer;
        }
        
        .file-item:hover {
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            transform: translateY(-2px);
        }
        
        .file-item.selected {
            border-color: #007bff;
            box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
        }
        
        .file-icon {
            font-size: 48px;
            margin-bottom: 10px;
            color: #6c757d;
        }
        
        .file-name {
            font-size: 14px;
            font-weight: 500;
            margin-bottom: 5px;
            word-break: break-word;
        }
        
        .file-size {
            font-size: 12px;
            color: #6c757d;
        }
        
        .file-actions {
            margin-top: 10px;
        }
        
        .file-actions .btn {
            padding: 4px 8px;
            font-size: 12px;
            margin: 0 2px;
        }
        
        .progress-container {
            margin-top: 20px;
        }
        
        .progress {
            height: 8px;
            border-radius: 4px;
        }
        
        .file-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 15px;
            background-color: #f8f9fa;
            border-radius: 5px;
            margin-bottom: 20px;
            font-size: 13px;
            color: #6c757d;
        }
        
        .file-info-left {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .search-bar {
            margin-bottom: 20px;
        }
        
        .toolbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            flex-wrap: wrap;
            gap: 10px;
        }
        
        .view-controls {
            display: flex;
            gap: 5px;
        }
        
        .view-controls .btn {
            padding: 8px 12px;
        }
        
        .breadcrumb {
            background: none;
            padding: 0;
            margin-bottom: 20px;
        }
        
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #6c757d;
        }
        
        .empty-state i {
            font-size: 64px;
            margin-bottom: 20px;
            opacity: 0.5;
        }
        
        @media (max-width: 768px) {
            .file-grid {
                grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
                gap: 15px;
            }
            
            .upload-area {
                padding: 30px 15px;
            }
            
            .toolbar {
                flex-direction: column;
                align-items: stretch;
            }
        }
        
        /* Preview modal styles */
        .preview-modal .modal-dialog {
            max-width: 90vw;
        }
        
        .preview-content {
            text-align: center;
        }
        
        .preview-image {
            max-width: 100%;
            max-height: 70vh;
            object-fit: contain;
        }
        
        /* File type specific colors */
        .file-item[data-type="pdf"] .file-icon { color: #dc3545; }
        .file-item[data-type="word"] .file-icon { color: #2b579a; }
        .file-item[data-type="excel"] .file-icon { color: #217346; }
        .file-item[data-type="powerpoint"] .file-icon { color: #d24726; }
        .file-item[data-type="image"] .file-icon { color: #6f42c1; }
        .file-item[data-type="archive"] .file-icon { color: #fd7e14; }
        .file-item[data-type="audio"] .file-icon { color: #20c997; }
        .file-item[data-type="video"] .file-icon { color: #e83e8c; }
        
        /* Loading states */
        .file-item.uploading {
            opacity: 0.6;
            pointer-events: none;
        }
        
        .file-item.uploading::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 20px;
            height: 20px;
            margin: -10px;
            border: 2px solid #f3f3f3;
            border-top: 2px solid #007bff;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
{% endblock %}

{% block content %}
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">
                        <i class="fas fa-folder-open"></i>
                        Gestionnaire de fichiers
                    </h3>
                </div>
                <div class="card-body">
                    <div class="file-manager">
                        <!-- Breadcrumb -->
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb">
                                <li class="breadcrumb-item active">Fichiers</li>
                            </ol>
                        </nav>
                        
                        <!-- Toolbar -->
                        <div class="toolbar">
                            <div class="d-flex align-items-center gap-2">
                                <button class="btn btn-primary" id="uploadBtn">
                                    <i class="fas fa-upload"></i> Télécharger
                                </button>
                                <button class="btn btn-outline-secondary" id="refreshBtn">
                                    <i class="fas fa-sync-alt"></i> Actualiser
                                </button>
                            </div>
                            
                            <div class="d-flex align-items-center gap-2">
                                <input type="search" class="form-control" id="searchFiles" placeholder="Rechercher..." style="width: 200px;">
                                <div class="view-controls">
                                    <button class="btn btn-outline-secondary active" id="gridView">
                                        <i class="fas fa-th"></i>
                                    </button>
                                    <button class="btn btn-outline-secondary" id="listView">
                                        <i class="fas fa-list"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Upload Area -->
                        <div class="upload-area" id="uploadArea">
                            <i class="fas fa-cloud-upload-alt"></i>
                            <h4>Glissez vos fichiers ici</h4>
                            <p class="text-muted">ou cliquez pour sélectionner</p>
                            <input type="file" id="fileInput" multiple style="display: none;">
                        </div>
                        
                        <!-- File Info -->
                        <div class="file-info">
                            <div class="file-info-left">
                                <i class="fas fa-info-circle"></i>
                                <span>Fichiers supportés : .jpg, .png, .webp, .pdf, .doc, .docx, .xls, .xlsx, .txt, .ppt, .pptx</span>
                            </div>
                            <span>Taille maximale : 10MB</span>
                        </div>
                        
                        <div id="progressContainer" class="progress-container" style="display: none;">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <small class="text-muted" id="uploadStatus">Téléchargement en cours...</small>
                                <small class="text-muted" id="uploadPercent">0%</small>
                            </div>
                            <div class="progress">
                                <div class="progress-bar" role="progressbar" style="width: 0%" id="uploadProgress"></div>
                            </div>
                        </div>
                        
                        <!-- Files Grid -->
                        <div class="file-grid" id="filesGrid">
                            <!-- Files will be loaded here via AJAX -->
                        </div>
                        
                        <!-- Empty State -->
                        <div class="empty-state" id="emptyState" style="display: none;">
                            <i class="fas fa-folder-open"></i>
                            <h5>Aucun fichier trouvé</h5>
                            <p class="text-muted">Commencez par télécharger vos premiers fichiers</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Preview Modal -->
<div class="modal fade" id="previewModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="previewTitle">Aperçu</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="preview-content" id="previewContent">
                    <!-- Preview content will be loaded here -->
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirmer la suppression</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Êtes-vous sûr de vouloir supprimer ce fichier ?</p>
                <p class="text-muted" id="deleteFileName"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">Supprimer</button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        class FileManager {
            constructor() {
                this.selectedFiles = new Set();
                this.currentView = 'grid';
                this.init();
            }
            
            init() {
                this.bindEvents();
                this.loadFiles();
            }
            
            bindEvents() {
                // Upload area events
                const uploadArea = document.getElementById('uploadArea');
                const fileInput = document.getElementById('fileInput');
                
                uploadArea.addEventListener('click', () => fileInput.click());
                uploadArea.addEventListener('dragover', (e) => {
                    e.preventDefault();
                    uploadArea.classList.add('dragover');
                });
                uploadArea.addEventListener('dragleave', () => {
                    uploadArea.classList.remove('dragover');
                });
                uploadArea.addEventListener('drop', (e) => {
                    e.preventDefault();
                    uploadArea.classList.remove('dragover');
                    this.handleFiles(e.dataTransfer.files);
                });
                
                fileInput.addEventListener('change', (e) => {
                    this.handleFiles(e.target.files);
                });
                
                // Toolbar events
                document.getElementById('uploadBtn').addEventListener('click', () => {
                    fileInput.click();
                });
                document.getElementById('refreshBtn').addEventListener('click', () => {
                    this.loadFiles();
                });
                document.getElementById('searchFiles').addEventListener('input', (e) => {
                    this.filterFiles(e.target.value);
                });
                
                // View toggle
                document.getElementById('gridView').addEventListener('click', () => {
                    this.setView('grid');
                });
                document.getElementById('listView').addEventListener('click', () => {
                    this.setView('list');
                });
                
                // Delete confirmation
                document.getElementById('confirmDelete').addEventListener('click', () => {
                    this.deleteSelectedFile();
                });
            }
            
            handleFiles(files) {
                Array.from(files).forEach(file => {
                    this.uploadFile(file);
                });
            }
            
            async uploadFile(file) {
                const formData = new FormData();
                formData.append('file', file);
                
                const progressContainer = document.getElementById('progressContainer');
                const uploadProgress = document.getElementById('uploadProgress');
                const uploadPercent = document.getElementById('uploadPercent');
                const uploadStatus = document.getElementById('uploadStatus');
                
                progressContainer.style.display = 'block';
                uploadStatus.textContent = `Téléchargement de ${file.name}...`;
                
                try {
                    const response = await fetch('{{ path('admin_filemanager_upload') }}', {
                        method: 'POST',
                        body: formData
                    });
                    
                    if (response.ok) {
                        const result = await response.json();
                        if (result.success) {
                            uploadProgress.style.width = '100%';
                            uploadPercent.textContent = '100%';
                            uploadStatus.textContent = 'Téléchargement terminé';
                            
                            setTimeout(() => {
                                progressContainer.style.display = 'none';
                                uploadProgress.style.width = '0%';
                                uploadPercent.textContent = '0%';
                            }, 1000);
                            
                            this.loadFiles();
                        } else {
                            throw new Error(result.message || 'Erreur lors du téléchargement');
                        }
                    } else {
                        throw new Error('Erreur réseau');
                    }
                } catch (error) {
                    console.error('Upload error:', error);
                    uploadStatus.textContent = 'Erreur: ' + error.message;
                    uploadProgress.classList.add('bg-danger');
                    
                    setTimeout(() => {
                        progressContainer.style.display = 'none';
                        uploadProgress.classList.remove('bg-danger');
                        uploadProgress.style.width = '0%';
                        uploadPercent.textContent = '0%';
                    }, 3000);
                }
            }
            
            async loadFiles() {
                try {
                    const response = await fetch('{{ path('admin_filemanager_list') }}');
                    const files = await response.json();
                    
                    this.renderFiles(files);
                } catch (error) {
                    console.error('Error loading files:', error);
                }
            }
            
            renderFiles(files) {
                const grid = document.getElementById('filesGrid');
                const emptyState = document.getElementById('emptyState');
                
                if (files.length === 0) {
                    grid.style.display = 'none';
                    emptyState.style.display = 'block';
                    return;
                }
                
                grid.style.display = 'grid';
                emptyState.style.display = 'none';
                
                grid.innerHTML = files.map(file => this.createFileElement(file)).join('');
                
                // Bind click events to new elements
                grid.querySelectorAll('.file-item').forEach(item => {
                    item.addEventListener('click', () => {
                        this.selectFile(item);
                    });
                });
                
                grid.querySelectorAll('.file-preview').forEach(btn => {
                    btn.addEventListener('click', (e) => {
                        e.stopPropagation();
                        this.previewFile(btn.dataset.fileId);
                    });
                });
                
                grid.querySelectorAll('.file-delete').forEach(btn => {
                    btn.addEventListener('click', (e) => {
                        e.stopPropagation();
                        this.showDeleteModal(btn.dataset.fileId, btn.dataset.fileName);
                    });
                });
            }
            
            createFileElement(file) {
                const fileType = this.getFileType(file.mimeType);
                const fileSize = this.formatFileSize(file.size);
                
                return `
                    <div class="file-item" data-file-id="${file.id}" data-type="${fileType}">
                        <div class="file-icon">
                            <i class="${this.getFileIcon(file.mimeType)}"></i>
                        </div>
                        <div class="file-name">${file.originalName}</div>
                        <div class="file-size">${fileSize}</div>
                        <div class="file-actions">
                            <button class="btn btn-sm btn-outline-primary file-preview" data-file-id="${file.id}">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger file-delete" data-file-id="${file.id}" data-file-name="${file.originalName}">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                `;
            }
            
            getFileType(mimeType) {
                if (mimeType.startsWith('image/')) return 'image';
                if (mimeType === 'application/pdf') return 'pdf';
                if (mimeType.includes('word')) return 'word';
                if (mimeType.includes('excel') || mimeType.includes('spreadsheet')) return 'excel';
                if (mimeType.includes('powerpoint') || mimeType.includes('presentation')) return 'powerpoint';
                if (mimeType.startsWith('audio/')) return 'audio';
                if (mimeType.startsWith('video/')) return 'video';
                if (mimeType === 'application/zip') return 'archive';
                return 'file';
            }
            
            getFileIcon(mimeType) {
                const type = this.getFileType(mimeType);
                const icons = {
                    image: 'far fa-file-image',
                    pdf: 'far fa-file-pdf',
                    word: 'far fa-file-word',
                    excel: 'far fa-file-excel',
                    powerpoint: 'far fa-file-powerpoint',
                    audio: 'far fa-file-audio',
                    video: 'far fa-file-video',
                    archive: 'far fa-file-archive'
                };
                return icons[type] || 'far fa-file';
            }
            
            formatFileSize(bytes) {
                if (bytes === 0) return '0 B';
                const k = 1024;
                const sizes = ['B', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }
            
            selectFile(item) {
                const fileId = item.dataset.fileId;
                
                if (this.selectedFiles.has(fileId)) {
                    this.selectedFiles.delete(fileId);
                    item.classList.remove('selected');
                } else {
                    this.selectedFiles.add(fileId);
                    item.classList.add('selected');
                }
            }
            
            setView(view) {
                this.currentView = view;
                
                document.getElementById('gridView').classList.toggle('active', view === 'grid');
                document.getElementById('listView').classList.toggle('active', view === 'list');
                
                const grid = document.getElementById('filesGrid');
                if (view === 'list') {
                    grid.style.gridTemplateColumns = '1fr';
                } else {
                    grid.style.gridTemplateColumns = 'repeat(auto-fill, minmax(200px, 1fr))';
                }
            }
            
            filterFiles(query) {
                const items = document.querySelectorAll('.file-item');
                items.forEach(item => {
                    const fileName = item.querySelector('.file-name').textContent.toLowerCase();
                    const matches = fileName.includes(query.toLowerCase());
                    item.style.display = matches ? 'block' : 'none';
                });
            }
            
            async previewFile(fileId) {
                try {
                    const response = await fetch(`{{ path('admin_filemanager_preview', {id: '__ID__'}) }}`.replace('__ID__', fileId));
                    const result = await response.json();
                    
                    if (result.success) {
                        const modal = new bootstrap.Modal(document.getElementById('previewModal'));
                        const title = document.getElementById('previewTitle');
                        const content = document.getElementById('previewContent');
                        
                        title.textContent = result.file.originalName;
                        
                        if (result.file.mimeType.startsWith('image/')) {
                            content.innerHTML = `<img src="${result.url}" alt="${result.file.originalName}" class="preview-image">`;
                        } else {
                            content.innerHTML = `
                                <div class="text-center">
                                    <i class="${this.getFileIcon(result.file.mimeType)} fa-4x mb-3"></i>
                                    <h5>${result.file.originalName}</h5>
                                    <p class="text-muted">${this.formatFileSize(result.file.size)}</p>
                                    <a href="${result.url}" class="btn btn-primary" target="_blank">
                                        <i class="fas fa-download"></i> Télécharger
                                    </a>
                                </div>
                            `;
                        }
                        
                        modal.show();
                    }
                } catch (error) {
                    console.error('Preview error:', error);
                }
            }
            
            showDeleteModal(fileId, fileName) {
                const modal = new bootstrap.Modal(document.getElementById('deleteModal'));
                const fileNameElement = document.getElementById('deleteFileName');
                const confirmButton = document.getElementById('confirmDelete');
                
                fileNameElement.textContent = fileName;
                confirmButton.dataset.fileId = fileId;
                
                modal.show();
            }
            
            async deleteSelectedFile() {
                const fileId = document.getElementById('confirmDelete').dataset.fileId;
                
                try {
                    const response = await fetch(`{{ path('admin_filemanager_delete', {id: '__ID__'}) }}`.replace('__ID__', fileId), {
                        method: 'DELETE'
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        bootstrap.Modal.getInstance(document.getElementById('deleteModal')).hide();
                        this.loadFiles();
                    } else {
                        alert('Erreur lors de la suppression: ' + result.message);
                    }
                } catch (error) {
                    console.error('Delete error:', error);
                    alert('Erreur lors de la suppression');
                }
            }
        }
        
        // Initialize file manager when DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            new FileManager();
        });
    </script>
{% endblock %}